package com.beans;

import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.logging.Log;

public class BaseDbBean {

	private static Log log = LogHelper.getLog(BaseDbBean.class);
	private static DbConfig dbConfig = new DbConfig();
	private String sqlfName = "record.sql";

	public BaseDbBean() {
		this.sqlfName = "record.sql";
	}

	public BaseDbBean(String sqlfName) {
		this.sqlfName = sqlfName;
	}

	public static Connection getConnection() {
		return dbConfig.getConn();
	}

	/**
	 * @param sql
	 * @param returnType
	 *            0 means list, 1 means map
	 * @param parm
	 * @return
	 */
	public List<Object> query(String sql, int returnType, String parm) {
		List<Object> results = new ArrayList<Object>();
		Connection connection = null;
		PreparedStatement SQLStament = null;
		ResultSet set = null;
		try {
			connection = getConnection();
			SQLStament = connection.prepareStatement(sql);
			SQLStament.setInt(1, Integer.getInteger(parm));
			set = SQLStament.executeQuery();
			ResultSetMetaData rsmd = set.getMetaData();
			int colCount = rsmd.getColumnCount();
			if (returnType == 0) {
				while (set != null && set.next()) {
					List<Object> temp = new ArrayList<Object>();
					for (int i = 0; i < colCount; i++) {
						temp.add(set.getObject(i + 1));
					}
					results.add(temp);
				}
			} else {
				while (set != null && set.next()) {
					HashMap<String, Object> temp = new HashMap<String, Object>();
					for (int i = 0; i < colCount; i++) {
						temp.put(rsmd.getColumnName(i + 1).toUpperCase(), set
								.getObject(i + 1));
					}
					results.add(temp);
				}
			}

		} catch (SQLException e) {
			results = null;
			log.error(e);
		} finally {
			if (set != null && SQLStament != null)
				try {
					set.close();
					SQLStament.close();
				} catch (SQLException e) {
					log.error(e);
				}
		}
		return results;
	}

	public List<Object> query(String sql, int returnType) {
		List<Object> results = new ArrayList<Object>();
		Statement stmt = null;
		ResultSet set = null;
		try {
			stmt = getConnection().createStatement();
			set = stmt.executeQuery(sql);
			ResultSetMetaData rsmd = set.getMetaData();
			int colCount = rsmd.getColumnCount();
			if (returnType == 0) {
				while (set != null && set.next()) {
					List<Object> temp = new ArrayList<Object>();
					for (int i = 0; i < colCount; i++) {
						temp.add(set.getObject(i + 1));
					}
					results.add(temp);
				}
			} else {
				while (set != null && set.next()) {
					HashMap<String, Object> temp = new HashMap<String, Object>();
					for (int i = 0; i < colCount; i++) {
						temp.put(rsmd.getColumnName(i + 1).toUpperCase(), set
								.getObject(i + 1));
					}
					results.add(temp);
				}
			}
			set.close();
			stmt.close();
		} catch (SQLException e) {
			results = null;
			log.error(e);
		}
		return results;
	}

	/**
	 * exceute update sql
	 * 
	 * @since 2013.06.25
	 * @param sql
	 * 
	 * @return int pass:counts of record;fail:-1
	 **/
	public int update(String sql) {
		int result = -1;
		Connection connection = null;
		Statement SQLStament = null;
		try {
			connection = getConnection();
			SQLStament = connection.createStatement();
			result = SQLStament.executeUpdate(sql);
			this.writeSqlToFile(sql);
		} catch (SQLException e) {
			log.error("更新数据库表记录时发生异常,SQL语句为：" + sql, e);
		} catch (Exception e) {
			log.error("更新数据库表记录时发生异常,SQL语句为：" + sql, e);
		} finally {
			closeStatment(SQLStament);
		}
		return result;
	}

	public int delete(String sql) {
		int result = -1;
		Connection connection = null;
		Statement SQLStament = null;
		try {
			connection = getConnection();
			SQLStament = connection.createStatement();
			result = SQLStament.executeUpdate(sql);
			this.writeSqlToFile(sql);
		} catch (SQLException e) {
			log.error("删除数据库表记录时发生异常,SQL语句为：" + sql, e);
		} catch (Exception e) {
			log.error("删除数据库表时记录发生异常,SQL语句为：" + sql, e);
		} finally {
			closeStatment(SQLStament);
		}
		return result;
	}

	public int create(String sql) {
		int result = -1;
		Connection connection = null;
		Statement SQLStament = null;
		try {
			connection = getConnection();
			SQLStament = connection.createStatement();
			result = SQLStament.executeUpdate(sql);
			this.writeSqlToFile(sql);
		} catch (SQLException e) {
			log.error("创建发生异常,SQL语句为：" + sql, e);
		} catch (Exception e) {
			log.error("创建数据库表时记录发生异常,SQL语句为：" + sql, e);
		} finally {
			closeStatment(SQLStament);
		}
		return result;
	}

	public int insert(String sql) {
		int result = -1;
		Connection connection = null;
		Statement SQLStament = null;
		try {
			connection = getConnection();
			SQLStament = connection.createStatement();
			result = SQLStament.executeUpdate(sql);
			this.writeSqlToFile(sql);
		} catch (SQLException e) {
			log.error("插入数据库表记录时发生异常,SQL语句为：" + sql, e);
		} catch (Exception e) {
			log.error("插入数据库表时记录发生异常,SQL语句为：" + sql, e);
		} finally {
			closeStatment(SQLStament);
		}
		return result;
	}

	public List<ElementData> queryByKey(String keyname) {
		return queryByKey(keyname, "", "", "");
	}

	public List<ElementData> queryByKey(String keyname, String tablename) {
		return queryByKey(keyname, "", "", tablename);
	}

	public List<ElementData> queryByKey(String keyname, String type,
			String typevalue) {
		return queryByKey(keyname, type, typevalue, "");
	}

	public List<ElementData> queryByKey(String keyname, String type,
			String typevalue, String table) {
		List resultList = new ArrayList();
		List tableResult = new ArrayList();
		if ("".equals(table)) {
			tableResult = queryAllTable(1);
			for (int i = 0; i < tableResult.size(); i++) {
				String tablename = (String) ((Map<String, Object>) tableResult
						.get(i)).get("TABLE_NAME");
				tablename = "page." + tablename;
				List temp = query(formatParam(tablename, keyname, type, typevalue),
						1);
				addResults(resultList, temp, tablename);
			}
		}
		else {
			table = "page." + table;
			List temp = query(formatParam(table, keyname, type, typevalue),
					1);
			addResults(resultList, temp, table);
		}
		return resultList;
	}
	
	public void addResults(List resultList, List temp, String tablename) {
		if (temp != null && temp.size() > 0) {
			for (int j = 0; j < temp.size(); j++) {
				Map map = (Map) temp.get(j);
				ElementData element = new ElementData();
				element.setCssvalue((String) map.get(Consts.CSSVALUE));
				element.setXpathvalue((String) map.get(Consts.XPATHVALUE));
				element.setPagename((String) map.get(Consts.PAGENAME));
				element.setNamevalue((String) map.get(Consts.NAMEVALUE));
				element.setKeyvalue((String) map.get(Consts.KEYVALUE));
				element.setIdvalue((String) map.get(Consts.IDVALUE));
				element.setTablename(tablename);
				if (!"".equals((String) map.get(Consts.CSSVALUE))) {
					element.setIdtype(Consts.CSSVALUE);
				} else if (!"".equals((String) map.get(Consts.XPATHVALUE))) {
					element.setIdtype(Consts.XPATHVALUE);
				} else if (!"".equals((String) map.get(Consts.NAMEVALUE))) {
					element.setIdtype(Consts.NAMEVALUE);
				} else {
					element.setIdtype(Consts.IDVALUE);
				}
 				resultList.add(element);
			}
		}
		
	}
	public String formatParam(String tablename, String keyvalue, String type,
			String typevalue) {
		String queryStr = "";
		if (type == null || "".equals(type)) {
			queryStr = "select * from " + tablename + " where keyvalue like '%"
					+ keyvalue + "%'";
		} else {
			queryStr = "select * from " + tablename + " where keyvalue ='"
					+ keyvalue + "' or " + type + "=\"" + typevalue + "\"";
		}
		// System.out.println(queryStr);
		return queryStr;
	}

	public List queryAllTable(int returntype) {
		return query(
				"select table_name from information_schema.tables where table_schema = 'page'",
				returntype);
	}

	public static void closeStatment(Statement c) {
		if (c != null) {
			try {
				c.close();
			} catch (SQLException ex) {
				;
			}
		}
	}

	public void close() {
		dbConfig.close();
	}

	public void writeSqlToFile(String sql) {
		File file = new File(this.sqlfName);
		FileWriter filew = null;
		try {
			filew = new FileWriter(file, true);// append mode
		} catch (IOException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		BufferedWriter buff = new BufferedWriter(filew);
		try {
			SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
			buff.write(df.format(new Date()) + "\n");
			buff.write(sql + "\n");
			buff.flush();
			buff.close();
			filew.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
}
